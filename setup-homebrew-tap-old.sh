#!/bin/bash

# Script para criar e configurar o reposit√≥rio homebrew-tap
# Execute: ./setup-homebrew-tap.sh

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üç∫ Aurora Boreas Homebrew Tap Setup${NC}"
echo "======================================"

# Verificar se git est√° instalado
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Git n√£o est√° instalado${NC}"
    exit 1
fi

REPO_NAME="homebrew-tap"
USERNAME="nataliagranato"

echo -e "${BLUE}üë§ Usu√°rio: $USERNAME${NC}"
echo -e "${BLUE}üì¶ Reposit√≥rio: $REPO_NAME${NC}"

# Verificar se o reposit√≥rio j√° existe
if gh repo view "$USERNAME/$REPO_NAME" &> /dev/null; then
    echo -e "${GREEN}‚úì Reposit√≥rio j√° existe!${NC}"
    if [ -d "$REPO_NAME" ]; then
        echo -e "${YELLOW}üìÅ Removendo diret√≥rio local existente...${NC}"
        rm -rf "$REPO_NAME"
    fi
    echo -e "${BLUE}üì• Clonando reposit√≥rio...${NC}"
    git clone "https://github.com/$USERNAME/$REPO_NAME.git"
    cd "$REPO_NAME"
    
    # Verificar se j√° tem a estrutura b√°sica
    if [ -f "Formula/auroraboreas.rb" ]; then
        echo -e "${BLUE}üìã Reposit√≥rio j√° cont√©m a f√≥rmula Aurora Boreas${NC}"
        echo -e "${YELLOW}üîÑ Atualizando arquivos...${NC}"
    else
        echo -e "${BLUE}üìã Reposit√≥rio existe mas precisa ser configurado${NC}"
    fi
else
    echo -e "${BLUE}üîç Reposit√≥rio n√£o encontrado. Tentando criar...${NC}"
    
    # Primeiro, tentar via REST API diretamente
    echo -e "${YELLOW}üîß Tentativa 1: Criando via GitHub CLI...${NC}"
    if gh repo create "$USERNAME/$REPO_NAME" --public --description "Homebrew tap for Aurora Boreas" 2>/dev/null; then
        echo -e "${GREEN}‚úì Reposit√≥rio criado com sucesso!${NC}"
        git clone "https://github.com/$USERNAME/$REPO_NAME.git"
        cd "$REPO_NAME"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Falha na cria√ß√£o autom√°tica${NC}"
        echo -e "${BLUE}üõ†Ô∏è  Configurando para cria√ß√£o manual...${NC}"
        
        # Criar diret√≥rio local
        mkdir -p "$REPO_NAME"
        cd "$REPO_NAME"
        git init -b main
        
        echo ""
        echo -e "${YELLOW}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${YELLOW}‚îÇ          CRIA√á√ÉO MANUAL NECESS√ÅRIA          ‚îÇ${NC}"
        echo -e "${YELLOW}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        echo ""
        echo -e "${BLUE}ÔøΩ Passos para criar o reposit√≥rio:${NC}"
        echo ""
        echo "1. Abra: https://github.com/new"
        echo "2. Repository name: $REPO_NAME"
        echo "3. Description: Homebrew tap for Aurora Boreas"
        echo "4. ‚úì Public"
        echo "5. ‚úó Add a README file"
        echo "6. ‚úó Add .gitignore"
        echo "7. ‚úó Choose a license"
        echo "8. Click 'Create repository'"
        echo ""
        echo -e "${GREEN}Quando terminar, pressione Enter para continuar...${NC}"
        read -r
        
        # Configurar remote
        git remote add origin "https://github.com/$USERNAME/$REPO_NAME.git"
        
        # Verificar se foi criado
        echo -e "${BLUE}üîç Verificando se o reposit√≥rio foi criado...${NC}"
        sleep 2
        if gh repo view "$USERNAME/$REPO_NAME" &> /dev/null; then
            echo -e "${GREEN}‚úì Reposit√≥rio encontrado!${NC}"
        else
            echo -e "${RED}‚ùå Reposit√≥rio n√£o encontrado. Verifique se foi criado corretamente.${NC}"
            exit 1
        fi
    fi
fi

# Criar estrutura de diret√≥rios
echo -e "${YELLOW}üìÅ Criando estrutura de diret√≥rios...${NC}"
mkdir -p Formula

# Criar README se n√£o existir ou atualizar
if [ ! -f "README.md" ] || ! grep -q "Aurora Boreas" README.md; then
    echo -e "${YELLOW}üìù Criando/atualizando README.md...${NC}"
    cp ../homebrew-tap-README.md README.md
else
    echo -e "${BLUE}‚úì README.md j√° existe e est√° configurado${NC}"
fi

# Criar f√≥rmula inicial se n√£o existir (ser√° substitu√≠da pelo GoReleaser)
if [ ! -f "Formula/auroraboreas.rb" ]; then
    echo -e "${YELLOW}üç∫ Criando f√≥rmula inicial...${NC}"
    cat > Formula/auroraboreas.rb << 'EOF'
# This file is auto-generated by GoReleaser
# Do not edit manually
class Auroraboreas < Formula
  desc "Aurora Boreas - Poesia e visualiza√ß√£o de c√©u estrelado"
  homepage "https://github.com/nataliagranato/auroraboreas"
  version "0.1.0"
  
  # This will be updated by GoReleaser
  url "https://github.com/nataliagranato/auroraboreas/releases/download/v0.1.0/auroraboreas-v0.1.0-darwin-amd64.tar.gz"
  sha256 "placeholder"
  
  def install
    bin.install "aurora"
  end

  test do
    system "#{bin}/aurora", "--version"
  end
end
EOF
else
    echo -e "${BLUE}‚úì F√≥rmula auroraboreas.rb j√° existe${NC}"
fi

# Criar .gitignore se n√£o existir
if [ ! -f ".gitignore" ]; then
    echo -e "${YELLOW}üìÑ Criando .gitignore...${NC}"
    cat > .gitignore << 'EOF'
.DS_Store
*.swp
*.swo
*~
EOF
else
    echo -e "${BLUE}‚úì .gitignore j√° existe${NC}"
fi

# Verificar se h√° mudan√ßas para commitar
if git diff --quiet && git diff --staged --quiet; then
    echo -e "${BLUE}‚úì Nenhuma mudan√ßa para commitar${NC}"
else
    # Commit das mudan√ßas
    echo -e "${YELLOW}üì§ Commitando mudan√ßas...${NC}"
    git add .
    
    # Verificar se h√° algo para commitar ap√≥s add
    if git diff --staged --quiet; then
        echo -e "${BLUE}‚úì Nenhuma mudan√ßa nova para commitar${NC}"
    else
        git commit -m "Update Aurora Boreas Homebrew tap

- Update Formula structure if needed
- Update README with latest information
- Ensure all required files are present"
        
        # Push para o GitHub
        echo -e "${YELLOW}üì§ Fazendo push para GitHub...${NC}"
        
        # Configurar autentica√ß√£o via GitHub CLI antes do push
        gh auth setup-git 2>/dev/null || true
        
        # Tentar push
        if ! git push origin main; then
            echo -e "${YELLOW}‚ö†Ô∏è  Push falhou com configura√ß√£o padr√£o. Tentando configura√ß√£o manual...${NC}"
            
            # Obter token do GitHub CLI
            GH_TOKEN=$(gh auth token)
            
            # Configurar remote com token
            git remote set-url origin "https://$GH_TOKEN@github.com/$USERNAME/$REPO_NAME.git"
            
            # Tentar push novamente
            if git push origin main; then
                echo -e "${GREEN}‚úì Push realizado com sucesso!${NC}"
                # Restaurar URL original
                git remote set-url origin "https://github.com/$USERNAME/$REPO_NAME.git"
            else
                echo -e "${RED}‚ùå Falha no push. Verifique as permiss√µes do token GitHub.${NC}"
                cd ..
                rm -rf "$REPO_NAME"
                exit 1
            fi
        else
            echo -e "${GREEN}‚úì Push realizado com sucesso!${NC}"
        fi
    fi
fi

echo -e "${GREEN}‚úÖ Reposit√≥rio homebrew-tap criado com sucesso!${NC}"
echo
echo -e "${BLUE}üîó URLs importantes:${NC}"
echo -e "   Reposit√≥rio: ${GREEN}https://github.com/$USERNAME/$REPO_NAME${NC}"
echo -e "   Clone URL: ${GREEN}git@github.com:$USERNAME/$REPO_NAME.git${NC}"
echo
echo -e "${BLUE}üìù Pr√≥ximos passos:${NC}"
echo "1. Certifique-se de que o GoReleaser est√° configurado para usar este tap"
echo "2. Fa√ßa uma release no reposit√≥rio principal para testar"
echo "3. Verifique se a f√≥rmula √© atualizada automaticamente"
echo
echo -e "${BLUE}üç∫ Para instalar via Homebrew:${NC}"
echo "   brew tap $USERNAME/tap"
echo "   brew install auroraboreas"

cd ..
echo -e "${YELLOW}üßπ Limpando diret√≥rio tempor√°rio...${NC}"
rm -rf homebrew-tap

echo -e "${GREEN}üéâ Setup conclu√≠do!${NC}"
echo -e "${BLUE}üí° Nota: O diret√≥rio homebrew-tap foi removido localmente.${NC}"
echo -e "${BLUE}   Use o reposit√≥rio separado: https://github.com/$USERNAME/$REPO_NAME${NC}"
